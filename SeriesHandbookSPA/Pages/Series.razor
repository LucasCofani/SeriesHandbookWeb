@page "/"
@inject SeriesHandbookHandler handler
@inject MainStateContainer mainState

<Tabs DefaultActiveKey="1" @bind-ActiveKey="@tabKey">
    <TabPane Key="1">
        <TabTemplate>Pesquisa</TabTemplate>
        <ChildContent>
            <Search Placeholder="Procure pelo nome da serie" @bind-Value="@handler.Query" OnSearch="@Search" />
            @if (handler.Search != null)
            {
                <br />
                <br />
                <h4>Busca: @handler.Query</h4>
                <br />
                <AntList DataSource="@handler.Search.Info.results" TItem="SeriesHandbookShared.Models.TMDB.Search.Result" Context="SearchItem" OnItemClick="GetDetail">
                    <ListItem>
                        <ListItemMeta Avatar="@string.Concat("https://image.tmdb.org/t/p/w185/", SearchItem.poster_path)" Description="@SearchItem.original_name">
                            <TitleTemplate>
                                <p>@SearchItem.name</p>
                            </TitleTemplate>
                        </ListItemMeta>
                    </ListItem>
                </AntList>
                <Pagination Size="small" OnChange="OnChangePage" Total="@handler.Search.Info.total_pages" />
            }
        </ChildContent>
    </TabPane>
    <TabPane Key="2">
        <TabTemplate>Detalhes</TabTemplate>
        <ChildContent>
            @if (handler.Series == null)
            {
                <Empty>
                    <DescriptionTemplate>
                        <span>Nenhuma informação selecionada</span>
                    </DescriptionTemplate>
                </Empty>
            }
            else
            {
                <Descriptions Title="@handler.Series.Info.name" Bordered Column="@column">
                    <DescriptionsItem Title="Capa">
                        <Image Width="200px" Src="@string.Concat("https://image.tmdb.org/t/p/original/", handler.Series.Info.poster_path)" Alt="@handler.Series.Info.original_name" />
                    </DescriptionsItem>
                    <DescriptionsItem Title="Nome">@handler.Series.Info.name</DescriptionsItem>
                    <DescriptionsItem Title="Nome Original">@handler.Series.Info.original_name</DescriptionsItem>
                    <DescriptionsItem Title="Pais de origem">@string.Join(",", handler.Series.Info.origin_country)</DescriptionsItem>
                    <DescriptionsItem Title="Linguagem original">@handler.Series.Info.original_language</DescriptionsItem>
                    <DescriptionsItem Title="Popularidade">@handler.Series.Info.popularity</DescriptionsItem>
                    <DescriptionsItem Title="Data de lançamento">@handler.Series.Info.first_air_date</DescriptionsItem>
                    <DescriptionsItem Title="Data do ultimo episodio">@handler.Series.Info.last_air_date</DescriptionsItem>
                    <DescriptionsItem Title="Quantidade de episodios">@handler.Series.Info.number_of_episodes</DescriptionsItem>
                    <DescriptionsItem Title="Quantidade de temporadas">@handler.Series.Info.number_of_seasons</DescriptionsItem>
                    <DescriptionsItem Title="Status da serie">@handler.Series.Info.status</DescriptionsItem>
                    <DescriptionsItem Title="Genero">
                        @foreach (var gen in handler.Series.Info.genres)
                        {
                            <p>@gen.name</p>
                        }
                    </DescriptionsItem>
                </Descriptions>
            }
        </ChildContent>
    </TabPane>
</Tabs>


@code{

    private string tabKey = "1";
    private Dictionary<string, int> column = new Dictionary<string, int> {
            { "xxl", 3 },
            { "xl", 3},
            { "lg", 2},
            { "md", 2},
            { "sm", 1},
            { "xs", 1}
        };

    protected override async void OnInitialized()
    {
        await mainState.SetPageName("Series");
        mainState.OnChange += StateHasChanged;
    }

    private async Task Search()
    {
        if (!string.IsNullOrEmpty(handler.Query))
        {
            await handler.EventHandler(SeriesHandbookHandler.SeriesEvents.GetSerieSearch);
        }
    }
    private async Task OnChangePage(PaginationEventArgs args)
    {
        if (args.Page == handler.Search.Info.page + 1)
        {
            await handler.EventHandler(SeriesHandbookHandler.SeriesEvents.GetSerieSearchNext);

        }
        else if (args.Page == handler.Search.Info.page - 1)
        {
            await handler.EventHandler(SeriesHandbookHandler.SeriesEvents.GetSerieSearchPrevious);
        }
        else
        {
            handler.Page = args.Page.ToString();
            await handler.EventHandler(SeriesHandbookHandler.SeriesEvents.GetSerieSearchPage);
        }
    }
    private async Task GetDetail(SeriesHandbookShared.Models.TMDB.Search.Result result)
    {
        handler.Id = result.id.ToString();
        await handler.EventHandler(SeriesHandbookHandler.SeriesEvents.GetSerieDetail);
        tabKey = "2";
    }
}